let currentPage = 0;
let totalPages = 1;

document.addEventListener("DOMContentLoaded", function () {
   cargarPaises("country-filter");
   cargarProductos();
   cargarFechas();
   cargarCont();
   cargarPagina(0);
   cargarPaises("pais1"); // Llenar√° el select con id="pais1"
   cargarPaises("pais2");

   // Event listeners para los filtros
   document.getElementById("country-filter").addEventListener("change", () => cargarPagina(0));
   document.getElementById("product-filter").addEventListener("change", () => cargarPagina(0));
   document.getElementById("time-filter").addEventListener("change", () => cargarPagina(0));
   document.getElementById("cont-filter").addEventListener("change", () => cargarPagina(0));
});

function cargarPagina(page) {
   if (page < 0 || page >= totalPages) return;

   // Obtener los valores seleccionados en los filtros
   let country = document.getElementById("country-filter").value;
   let product = document.getElementById("product-filter").value;
   let time = document.getElementById("time-filter").value;
   let idcont = document.getElementById("cont-filter").value;

   let url = `/api/usuarios?page=${page}&size=5`;
   if (country) url += `&country=${encodeURIComponent(country)}`;
   if (product) url += `&product=${encodeURIComponent(product)}`;
   if (time) url += `&time=${encodeURIComponent(time)}`;
   if (idcont) url += `&idcont=${encodeURIComponent(idcont)}`;

   fetch(url)
      .then(response => response.json())
      .then(data => {
         const tbody = document.getElementById("tabla-usuarios");
         tbody.innerHTML = ""; // Limpiar contenido anterior

         data.usuarios.forEach(usuario => {
            const row = document.createElement("tr");
            row.innerHTML = `
        <td>${usuario.id}</td>
        <td>${usuario.country}</td>
        <td>${usuario.time}</td>
        <td>${usuario.balance}</td>
        <td>${usuario.product}</td>
        <td>${usuario.idcont}</td>
        <td>${usuario.value}</td>
        <td>${usuario.unit}</td> 
       `;
            tbody.appendChild(row);
         });

         // Actualizar paginaci√≥n
         currentPage = data.currentPage;
         totalPages = data.totalPages;

         document.getElementById("page-input").value = currentPage + 1; // Mostrar n√∫mero de p√°gina actual
         document.getElementById("total-pages").textContent = totalPages;

         document.getElementById("prev-btn").disabled = currentPage === 0;
         document.getElementById("next-btn").disabled = currentPage + 1 >= totalPages;
      })
      .catch(error => console.error("Error cargando la p√°gina:", error));
}

const paisesTraducidos = {
    "Australia": "Australia", "Austria": "Austria", "Belgium": "B√©lgica",
    "Canada": "Canad√°", "Chile": "Chile", "Colombia": "Colombia",
    "Costa Rica": "Costa Rica", "Czech Republic": "Rep√∫blica Checa",
    "Denmark": "Dinamarca", "Estonia": "Estonia", "Finland": "Finlandia",
    "France": "Francia", "Germany": "Alemania", "Greece": "Grecia",
    "Hungary": "Hungr√≠a", "Iceland": "Islandia", "Ireland": "Irlanda",
    "Italy": "Italia", "Japan": "Jap√≥n", "Korea": "Corea",
    "Latvia": "Letonia", "Lithuania": "Lituania", "Luxembourg": "Luxemburgo",
    "Mexico": "M√©xico", "Netherlands": "Pa√≠ses Bajos",
    "New Zealand": "Nueva Zelanda", "Norway": "Noruega",
    "Poland": "Polonia", "Portugal": "Portugal",
    "Slovak Republic": "Rep√∫blica Eslovaca", "Slovenia": "Eslovenia",
    "Spain": "Espa√±a", "Sweden": "Suecia", "Switzerland": "Suiza",
    "Republic of Turkiye": "Rep√∫blica de Turqu√≠a",
    "United Kingdom": "Reino Unido", "United States": "Estados Unidos",
    "OECD Americas": "OCDE Am√©rica", "OECD Asia Oceania": "OCDE Asia Ocean√≠a",
    "OECD Europe": "OCDE Europa", "OECD Total": "Total OCDE",
    "IEA Total": "Total AIE", "Argentina": "Argentina", "Brazil": "Brasil",
    "Bulgaria": "Bulgaria", "People's Republic of China": "Rep√∫blica Popular China",
    "Croatia": "Croacia", "Cyprus": "Chipre", "India": "India",
    "Malta": "Malta", "North Macedonia": "Macedonia del Norte",
    "Romania": "Rumania", "Serbia": "Serbia"
};


function cargarPaises(selectId) {
   fetch("/api/paises")
      .then(response => response.json())
      .then(paises => {
         const select = document.getElementById(selectId);
         if (!select) {
            console.error(`No se encontr√≥ el elemento con ID: ${selectId}`);
            return;
         }

         select.innerHTML = `<option value="">Seleccione un pa√≠s</option>`;
         paises.forEach(pais => {
            const option = document.createElement("option");
            option.value = pais;
            option.textContent = paisesTraducidos[pais] || pais;
            select.appendChild(option);
         });
      })
      .catch(error => console.error(`Error cargando los pa√≠ses en ${selectId}:`, error));
}


function cargarProductos() {
   fetch("/api/productos")
      .then(response => response.json())
      .then(productos => {
         const select = document.getElementById("product-filter");
         select.innerHTML = `<option value="">Seleccione un producto</option>`;
         productos.forEach(producto => {
            const option = document.createElement("option");
            option.value = producto;
            option.textContent = producto;
            select.appendChild(option);
         });
      })
      .catch(error => console.error("Error cargando los productos:", error));
}

function cargarCont() {
   fetch("/api/idcont")
      .then(response => response.json())
      .then(idconts => {
         const select = document.getElementById("cont-filter");
         select.innerHTML = `<option value="">Seleccione un continente</option>`;
         idconts.forEach(idcont => {
            const option = document.createElement("option");
            option.value = idcont;
            option.textContent = idcont;
            select.appendChild(option);
         });
      })
      .catch(error => console.error("Error cargando los continentes:", error));
}

function cargarFechas() {
   fetch("/api/times")
      .then(response => response.json())
      .then(fechas => {
         const select = document.getElementById("time-filter");
         select.innerHTML = `<option value="">Seleccione una fecha</option>`;
         fechas.forEach(fecha => {
            const option = document.createElement("option");
            option.value = fecha;
            option.textContent = fecha;
            select.appendChild(option);
         });
      })
      .catch(error => console.error("Error cargando las fechas:", error));
}

document.getElementById("page-input").addEventListener("keypress", function (event) {
   if (event.key === "Enter") {
      irAPagina();
   }
});

function irAPagina() {
   let pageInput = document.getElementById("page-input").value;
   let pageNumber = parseInt(pageInput, 10) - 1;

   if (!isNaN(pageNumber) && pageNumber >= 0 && pageNumber < totalPages) {
      cargarPagina(pageNumber);
   } else {
      Swal.fire({
         title: "Numero de pagina invalido",
         text: "Recuerda que solo admite numeros positivos",
         icon: "error"
      });
      document.getElementById("page-input").value = currentPage + 1; // Restaurar valor actual si es inv√°lido
   }
}



// Logica del Comparador

const etiquetasPersonalizadas = {
    "Solar": "Energ√≠a Solar",
    "Wind": "Energ√≠a E√≥lica",
    "Hydro": "Energ√≠a Hidroel√©ctrica",
    "Total Combustible Fuels": "Combustibles F√≥siles",
    "Electricity": "Electricidad Total",
    "Total Renewables (Hydro, Geo, Solar, Wind, Other)": "Total Energ√≠a Renovable",
    "TotalRenewables":"Total Energ√≠a Renovable"
};
// LISTENER GENERAL
document.addEventListener("DOMContentLoaded", function () {
    let botonComparar = document.getElementById("comparar");
    let selectAnio = document.getElementById("anio");
    let selectMes = document.getElementById("mes");
    let selectPais1 = document.getElementById("pais1");
    let selectPais2 = document.getElementById("pais2");

    if (selectAnio) selectAnio.addEventListener("change", () => {
        ocultarElementos(".contenido3");
        ocultarElementos(".contenido1");
    });

    if (selectMes) selectMes.addEventListener("change", () => {
        ocultarElementos(".contenido3");
        ocultarElementos(".contenido1");
    });

    if (selectPais1) selectPais1.addEventListener("change", () => {
        ocultarElementos(".contenido3");
        ocultarElementos(".contenido1");
    });

    if (selectPais2) selectPais2.addEventListener("change", () => {
        ocultarElementos(".contenido3");
        ocultarElementos(".contenido1");
    });


    if (botonComparar) {
        botonComparar.addEventListener("click", function () {
            let selectAnio = document.getElementById("anio");
            let selectMes = document.getElementById("mes");

            if (!selectAnio) {
                console.error("‚ùå No se encontr√≥ el selector con ID 'anio'.");
                return;
            }

            if (!selectMes) {
                console.error("‚ùå No se encontr√≥ el selector con ID 'mes'.");
                return;
            }


            let country1 = document.getElementById("pais1")?.value;
            let country2 = document.getElementById("pais2")?.value;
            let mes = selectMes.value;
            let anio = selectAnio.value;

            if (!country1 || !country2) {
                atention("Por favor, seleccione ambos pa√≠ses.");
                return;
            }

            if (country1 === country2) {
                atention("Por favor, seleccione dos pa√≠ses diferentes.");
                return;
            }

            if (!mes || !anio) {
                atention("Por favor, seleccione un mes y un a√±o.");
                return;
            }
            // ‚úÖ Si el a√±o seleccionado es "Anual"
            if (selectAnio.value === "Anual") {
                // console.log("üìÖ Modo Anual seleccionado");
                //selectMes.value = ""; // ‚ùå Limpiar la selecci√≥n de mes
                realizarComparacionAnual();
            }
            // ‚úÖ Si no es "Anual"
            else {
                // console.log("üìä Ejecutando comparaci√≥n mensual...");
                realizarComparacion();
            }
        });
    } else {
        console.error("‚ùå No se encontr√≥ el bot√≥n con ID 'comparar'.");
    }
});

///// PARA LA COMPARACI√ìN MENSUAL

function realizarComparacion() {
    // Obtener valores seleccionados
    let country1 = document.getElementById("pais1").value;
    let country2 = document.getElementById("pais2").value;
    let mes = document.getElementById("mes").value;
    let anio = document.getElementById("anio").value;


    ocultarElementos(".contenido3" )

    // ‚úÖ Verificar que ambos pa√≠ses sean diferentes antes de la petici√≥n
    if (!country1 || !country2) {
        alert("Por favor seleccione ambos pa√≠ses.");
        return;
    }
    if (country1 === country2) {
        alert("Por favor seleccione dos pa√≠ses diferentes.");
        return;
    }

    // ‚úÖ Verificar que se haya seleccionado mes y a√±o
    if (!mes || !anio) {
        alert("Por favor seleccione un mes y un a√±o.");
        return;
    }

    // ‚úÖ Construcci√≥n de fecha correcta
    let time = `${mes} ${anio}`;

    // ‚úÖ Construcci√≥n de URL con par√°metros codificados
    let url1 = `/api/comparacion?country=${encodeURIComponent(country1)}&time=${encodeURIComponent(time)}`;
    let url2 = `/api/comparacion?country=${encodeURIComponent(country2)}&time=${encodeURIComponent(time)}`;

    // ‚úÖ Hacer las peticiones fetch
    Promise.all([fetch(url1), fetch(url2)])
        .then(responses => Promise.all(responses.map(res => res.json())))
        .then(([data1, data2]) => {
            // console.log("üìä Datos recibidos:", data1, data2);

            // ‚úÖ Verificar que los datos no sean null o undefined antes de usar Object.keys()
            if (!data1 || !data2) {
                alert("Error al obtener los datos.");
                return;
            }

            // ‚úÖ Si ambos datos est√°n vac√≠os, no se puede comparar
            if (Object.keys(data1).length === 0 && Object.keys(data2).length === 0) {
                alert("No es posible realizar la comparaci√≥n.");
                mostrarElementos(false, ".contenido1");
                return;
            }

            // ‚úÖ Verificar si los datos son iguales
            if (JSON.stringify(data1) === JSON.stringify(data2)) {
                alert("Los datos son id√©nticos. Por favor elija dos pa√≠ses diferentes.");
                mostrarElementos(false, ".contenido1");
                return;
            }

            // ‚úÖ Verificar si alguno de los datos est√° vac√≠o
            if (Object.keys(data1).length === 0) {
                alert(`No hay datos disponibles para ${country1} en ${time}.`);
                mostrarElementos(false, ".contenido1");
                return;
            }
            if (Object.keys(data2).length === 0) {
                alert(`No hay datos disponibles para ${country2} en ${time}.`);
                mostrarElementos(false, ".contenido1");
                return;
            }

            // ‚úÖ Si hay datos, mostrar la tabla y actualizar la UI
            mostrarElementos(true, ".contenido1");
            actualizarTabla("tablaComparacionab", data1);

            actualizarTabla("tablaComparacionbb", data2);

            calcularPorcentajeRenovable("pais1-nombre", data1, paisesTraducidos[country1] || country1,  "porcentaje-renovable-1");
            calcularPorcentajeRenovable("pais2-nombre", data2, paisesTraducidos[country2] || country2, "porcentaje-renovable-2");


            actualizarTexto(country1, "resultado1a");
            actualizarTexto(country2, "resultado2a");



        })
        .catch(error => console.error("Error en la comparaci√≥n:", error));
}

// ‚úÖ Funci√≥n para mostrar u ocultar elementos en la UI
function mostrarElementos(mostrar, claseMostrar) {
    let contenido = document.querySelector(claseMostrar);

    if (!contenido) {
        console.error(`‚ùå No se encontr√≥ el elemento con clase: ${claseMostrar}`);
        return;
    }

    contenido.style.display = mostrar ? "block" : "none";
    contenido.style.opacity = mostrar ? 1 : 0;
}

function ocultarElementos(claseOcultar) {
    let contenido = document.querySelector(claseOcultar);

    if (!contenido) {
        console.error(`‚ùå No se encontr√≥ el elemento con clase: ${claseOcultar}`);
        return;
    }

    contenido.style.display = "none";
    contenido.style.opacity = 0;
}


function actualizarTexto(pais, resultadoId) {
    let resultado = document.getElementById(resultadoId);

        resultado.textContent = paisesTraducidos[pais] || pais;

}

function actualizarTabla(tablaId, data) {
    let tbody = document.getElementById(tablaId);
    if (!tbody) {
        console.error(`No se encontr√≥ el elemento con ID: ${tablaId}`);
        return; // ‚úÖ Aqu√≠ se detiene si no se encuentra el tbody
    }

    tbody.innerHTML = ""; // ‚úÖ Se limpia la tabla antes de llenarla

    const ordenEnergia = ["Solar", "Wind", "Hydro",
        "Total Renewables (Hydro, Geo, Solar, Wind, Other)",
        "Total Combustible Fuels", "Electricity"];

    ordenEnergia.forEach(tipoEnergia => {
        if (data.hasOwnProperty(tipoEnergia)) {
            let etiqueta = etiquetasPersonalizadas[tipoEnergia] || tipoEnergia;

            let row = document.createElement("tr");
            row.innerHTML = `<td>${etiqueta}</td><td>${data[tipoEnergia].toFixed(2)} </td>`;
            tbody.appendChild(row);
        }
    });
}


function calcularPorcentajeRenovable(IdTexto, data, country, IdPorcent) {
    console.log("midata", data);
    let spanPorcentaje = document.getElementById(IdPorcent);
    let spanPais = document.getElementById(IdTexto);

    // Verificar si los elementos existen en el DOM
    if (!spanPorcentaje || !spanPais) {
        console.error("No se encontraron los elementos en el DOM.");
        return;
    }

    // Inicializar acumuladores para energ√≠a renovable y total
    let totalElectricidad = data.Electricity || 0; // Tomar directamente la propiedad "Electricity"
    let totalRenovable = data["Total Renewables (Hydro, Geo, Solar, Wind, Other)"] || 0; // Tomar directamente la propiedad "Total Renewables"

    // Evitar divisi√≥n por 0 y calcular el porcentaje
    let porcentaje = (totalElectricidad === 0) ? 0 : (totalRenovable / totalElectricidad) * 100;

    // Actualizar el contenido en la UI
    spanPais.textContent = paisesTraducidos[country] || country; // Mostrar el nombre del pa√≠s traducido
    spanPorcentaje.textContent = `${porcentaje.toFixed(2)}%`; // Mostrar el porcentaje con 2 decimales

    // Devolver el porcentaje
    return porcentaje.toFixed(2); // Devolver el porcentaje con 2 decimales
}


//// A PARTIR DE AQU√ç VA LA COMPARACION ANUAL
function realizarComparacionAnual() {
    let country1 = document.getElementById("pais1").value;
    let country2 = document.getElementById("pais2").value;
    let year = document.getElementById("mes").value; // Selector de a√±o

    // ‚úÖ Verificar que ambos pa√≠ses sean diferentes antes de la petici√≥n
    if (!country1 || !country2) {
        alert("Por favor seleccione ambos pa√≠ses.");
        return;
    }
    if (country1 === country2) {
        alert("Por favor seleccione dos pa√≠ses diferentes.");
        return;
    }

    // ‚úÖ Verificar que se haya seleccionado mes y a√±o
    if (!mes || !anio) {
        alert("Por favor seleccione par√°metros.");
        return;
    }


    ocultarElementos(".contenido1");

    let url1 = `/api/comparacion-anual?country=${encodeURIComponent(country1)}`;
    let url2 = `/api/comparacion-anual?country=${encodeURIComponent(country2)}`;

    Promise.all([fetch(url1), fetch(url2)])
        .then((responses) => Promise.all(responses.map((res) => res.json())))
        .then(([data1, data2]) => {
            // Filtrar los datos por el a√±o seleccionado
            const filtrarDatosPorAnio = (data, anio) => {
                return data.filter((d) => d.year === anio);
            };

            const datosFiltrados1 = filtrarDatosPorAnio(data1, year);
            const datosFiltrados2 = filtrarDatosPorAnio(data2, year);

            // console.log("üìä Datos filtrados:", datosFiltrados1, datosFiltrados2);
            // console.log("üìä Datos originales:", data1, data2);

            mostrarElementos(true, ".contenido3");

            actualizarTablaAnual("tablaComparacioncb", datosFiltrados1);
            actualizarTablaAnual("tablaComparaciondb", datosFiltrados2);

            let porcentaje1= calcularPorcentajeRenovableAnual("pais1-nombre2", datosFiltrados1, country1, "porcentaje-renovable-12");
            let porcentaje2= calcularPorcentajeRenovableAnual("pais2-nombre2", datosFiltrados2, country2, "porcentaje-renovable-22");
            // console.log("pocentajes", porcentaje1, porcentaje2);

            const p1 = calcularPorcentajesEnergia(data1);
            const p2 = calcularPorcentajesEnergia(data2);
            // console.log("üìä Datos Porcentaje:", p1, p2);
            crearGraficoEnergia(p1, p2,paisesTraducidos[country1] || country1, paisesTraducidos[country2] || country2, year);

            // console.log("crecimiento anual",calcularCrecimientoEnergia(data1));

            actualizarTablaCrecimiento("tcrecimientoa", calcularCrecimientoEnergia(data1));
            actualizarTablaCrecimiento("tcrecimientoc", calcularCrecimientoEnergia(data2));

            actualizarTexto(country1, "resultado1b");
            actualizarTexto(country2, "resultado2b");
            actualizarTexto(country1, "resultado3b");
            actualizarTexto(country2, "resultado4b");

            escrito1(paisesTraducidos[country1] || country1, paisesTraducidos[country2] || country2, porcentaje1, porcentaje2);
            escrito2(paisesTraducidos[country1] || country1, paisesTraducidos[country2] || country2, p1, p2);
            escrito3(paisesTraducidos[country1] || country1, paisesTraducidos[country2] || country2, calcularCrecimientoEnergia(data1), calcularCrecimientoEnergia(data2))


        })

        .catch((error) => console.error("‚ùå Error en la comparaci√≥n anual:", error));

}

function actualizarTablaAnual(tablaId, data) {
    let tbody = document.getElementById(tablaId);
    if (!tbody) {
        console.error(`No se encontr√≥ el elemento con ID: ${tablaId}`);
        return; // ‚úÖ Aqu√≠ se detiene si no se encuentra el tbody
    }

    tbody.innerHTML = ""; // ‚úÖ Se limpia la tabla antes de llenarla

    const ordenEnergia = ["Solar", "Wind", "Hydro",
        "Total Renewables (Hydro, Geo, Solar, Wind, Other)",
        "Total Combustible Fuels", "Electricity"];

    // Iterar sobre los datos proporcionados
    data.forEach(entry => {
        const { product, total_energia } = entry; // Extraemos las propiedades necesarias



        // Obtenemos la etiqueta personalizada o usamos el nombre original si no est√° en el diccionario
        let etiqueta = etiquetasPersonalizadas[product] || product;

        // Creamos una nueva fila para la tabla
        let row = document.createElement("tr");
        row.innerHTML = `<td>${etiqueta}</td><td>${total_energia.toFixed(2)} GWh</td>`;
        tbody.appendChild(row);
    });
}



function calcularPorcentajeRenovableAnual(IdTexto, data, country, IdPorcent) {
    let spanPorcentaje = document.getElementById(IdPorcent);
    let spanPais = document.getElementById(IdTexto);

    // Verificar si los elementos existen en el DOM
    if (!spanPorcentaje || !spanPais) {
        console.error("No se encontraron los elementos en el DOM.");
        return;
    }

    // Inicializar acumuladores para energ√≠a renovable y total
    let renovable = 0;
    let consumida = 0;

    // Iterar sobre los datos para calcular energ√≠a renovable y total consumida
    data.forEach(entry => {
        const { product, total_energia } = entry;

        // Verificar si el producto est√° en el diccionario de energ√≠as renovables
        if (product === "Total Renewables (Hydro, Geo, Solar, Wind, Other)") {
            renovable += total_energia; // Sumar al acumulador de renovables
        }

        if (product === "Electricity") { // Energ√≠a total consumida
            consumida += total_energia; // Sumar al acumulador de consumida
        }
    });

    // Evitar divisi√≥n por 0
    let porcentaje = (consumida === 0) ? 0 : (renovable / consumida) * 100;

    // Actualizar el contenido en la UI
    spanPais.textContent = etiquetasPersonalizadas[country] || country; // Mostrar el nombre del pa√≠s con etiqueta personalizada
    spanPorcentaje.textContent = `${porcentaje.toFixed(2)}%`; // Mostrar porcentaje con 2 decimales

    return porcentaje.toFixed(2); // Devolver el porcentaje con 2 decimales
}



function calcularPorcentajesEnergia(datos) {
    // Objeto para almacenar los porcentajes organizados por a√±o
    let resultados = {};

    // Iterar sobre los datos
    datos.forEach(item => {
        let { product, year, total_energia } = item;

        // Si el a√±o a√∫n no est√° en resultados, inicializarlo
        if (!resultados[year]) {
            resultados[year] = {
                Porcentajes: {
                    Hydro: "0%",
                    Solar: "0%",
                    Wind: "0%",
                    TotalRenewables: "0%"
                }
            };
        }

        // Asignar valores seg√∫n el tipo de energ√≠a
        if (product === "Electricity") {
            resultados[year].Electricity = total_energia;
        } else if (product === "Hydro") {
            resultados[year].Hydro = total_energia;
        } else if (product === "Solar") {
            resultados[year].Solar = total_energia;
        } else if (product === "Wind") {
            resultados[year].Wind = total_energia;
        } else if (product.includes("Total Renewables (Hydro, Geo, Solar, Wind, Other)")) {
            resultados[year].TotalRenewables = total_energia;
        }
    });

    // Calcular porcentajes
    Object.keys(resultados).forEach(year => {
        let totalElectricity = resultados[year].Electricity;

        if (totalElectricity > 0) {
            resultados[year].Porcentajes = {
                Hydro: (resultados[year].Hydro / totalElectricity * 100).toFixed(2) + '%',
                Solar: (resultados[year].Solar / totalElectricity * 100).toFixed(2) + '%',
                Wind: (resultados[year].Wind / totalElectricity * 100).toFixed(2) + '%',
                TotalRenewables: (resultados[year].TotalRenewables / totalElectricity * 100).toFixed(2) + '%'
            };
        }

        // Eliminar los valores absolutos de energ√≠a
        delete resultados[year].Electricity;
        delete resultados[year].Hydro;
        delete resultados[year].Solar;
        delete resultados[year].Wind;
        delete resultados[year].TotalRenewables;
    });

    return resultados;
}


const mesesPorAnio = {
    "2022": ["August", "September", "October", "November", "December"],
    "2023": ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    "2024": ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November"],
    "Anual":["2022","2023","2024"]
};

const dicMes = {
    "August": "Agosto", "September": "Septiembre", "October": "Octubre", "November": "Noviembre", "December": "Diciembre", "January": "Enero", "February": "Febrero",
    "March": "Marzo", "April": "Abril", "May": "Mayo", "June": "Junio", "July": "Julio"
};


// Cargar meses autom√°ticamente cuando el usuario cambia el a√±o
document.addEventListener("DOMContentLoaded", function () {
    document.getElementById("anio").addEventListener("change", cargarMeses);
});

function cargarMeses() {
    let anioSeleccionado = document.getElementById("anio").value;
    let selectMes = document.getElementById("mes");

    // Si no se ha seleccionado un a√±o, mostrar solo la opci√≥n por defecto
    if (!anioSeleccionado) {
        selectMes.innerHTML = `<option value="">Seleccione</option>`;
        return;
    }

    // Obtener los meses correspondientes al a√±o seleccionado
    let meses = mesesPorAnio[anioSeleccionado] || []; // Si no hay meses, usa un array vac√≠o

    // Limpiar y actualizar el select de meses
    selectMes.innerHTML = `<option value="">Seleccione</option>`; // Resetear opciones
    meses.forEach(mes => {
        let option = document.createElement("option");
        option.value = mes;
        option.textContent = dicMes[mes] || mes;
        selectMes.appendChild(option);
    });
}


const selector = document.getElementById("selectorEtiquetas");

// Iterar sobre el diccionario para agregar cada opci√≥n
for (let key in etiquetasPersonalizadas) {
    if (etiquetasPersonalizadas.hasOwnProperty(key)) {
        const option = document.createElement("option");
        option.value = key; // Valor interno (clave del diccionario)
        option.textContent = etiquetasPersonalizadas[key]; // Texto visible (en espa√±ol)
        selector.appendChild(option); // A√±adir la opci√≥n al selector
    }
}


// Funci√≥n para crear el gr√°fico comparativo de energ√≠a entre dos pa√≠ses
function crearGraficoEnergia(datosPais1, datosPais2, nombrePais1, nombrePais2, a√±oSeleccionado) {
    // Obtener el contexto del canvas donde se renderizar√° la gr√°fica
    const ctx = document.getElementById('graficoEnergia').getContext('2d');

    // Verificar si el gr√°fico ya existe y destruirlo para evitar duplicados
    if (window.miGrafico) {
        window.miGrafico.destroy();
    }

    // Extraer los datos del a√±o seleccionado
    const data1 = datosPais1[a√±oSeleccionado]?.Porcentajes || {};
    const data2 = datosPais2[a√±oSeleccionado]?.Porcentajes || {};

    // Tipos de energ√≠a a graficar
    const etiquetas = ["Hydro", "Solar", "Wind"];

    // Crear datasets para cada pa√≠s
    const datasetPais1 = {
        label: nombrePais1,
        data: etiquetas.map(tipo => parseFloat(data1[tipo]) || 0),
        backgroundColor: 'rgba(54, 162, 235, 0.6)', // Azul
        borderColor: 'rgb(54, 162, 235)',
        borderWidth: 1
    };

    const datasetPais2 = {
        label: nombrePais2,
        data: etiquetas.map(tipo => parseFloat(data2[tipo]) || 0),
        backgroundColor: 'rgba(255, 99, 132, 0.6)', // Rojo
        borderColor: 'rgb(255, 99, 132)',
        borderWidth: 1
    };

    // Configuraci√≥n de los datos para el gr√°fico
    const data = {
        labels: etiquetas,
        datasets: [datasetPais1, datasetPais2]
    };

    // Configuraci√≥n del gr√°fico
    const config = {
        type: 'bar',
        data: data,
        options: {
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: `Comparaci√≥n Energ√©tica - A√±o ${a√±oSeleccionado}`
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    max: 100, // M√°ximo 100% ya que son porcentajes
                    title: {
                        display: true,
                        text: 'Porcentaje (%)'
                    }
                }
            }
        }
    };

    // Crear y renderizar el gr√°fico
    window.miGrafico = new Chart(ctx, config);
}


function calcularCrecimientoEnergia(datos) {
let categoriasExcluidas = ["Electricity"];
let crecimientoPorCategoria = {};

// Llamamos a la funci√≥n que calcula los porcentajes
let porcentajes = calcularPorcentajesEnergia(datos);

let years = Object.keys(porcentajes).sort(); // Ordenamos los a√±os

for (let categoria in porcentajes[years[0]].Porcentajes) {
 if (!categoriasExcluidas.includes(categoria)) {
     let crecimiento = {};
     let crecimientosArray = [];

     for (let i = 1; i < years.length; i++) {
         let yearActual = years[i];
         let yearAnterior = years[i - 1];

         let totalActual = parseFloat(porcentajes[yearActual].Porcentajes[categoria]);
         let totalAnterior = parseFloat(porcentajes[yearAnterior].Porcentajes[categoria]);

         // Calcular crecimiento porcentual
         let crecimientoAnual = ((totalActual - totalAnterior) / totalAnterior * 100).toFixed(2);

         // Guardar resultado
         crecimiento[`${yearAnterior}-${yearActual}`] = `${crecimientoAnual}%`;

         // Agregar al array para promedio
         crecimientosArray.push(parseFloat(crecimientoAnual));

     }

     // Calcular promedio de crecimiento
     let promedioCrecimiento = (crecimientosArray.reduce((a, b) => a + b, 0) / crecimientosArray.length).toFixed(2);

     crecimiento["PromedioCrecimiento"] = `${promedioCrecimiento}%`;

     // Guardar crecimiento para la categor√≠a actual
     crecimientoPorCategoria[categoria] = crecimiento;
 }
}

return crecimientoPorCategoria;
}

function actualizarTablaCrecimiento(tablaId, data) {
// console.log("üìä Datos :", data);
let tbody = document.getElementById(tablaId);

// Limpiar la tabla antes de llenarla
tbody.innerHTML = "";

// Obtener las categor√≠as (Hydro, Solar, etc.)
const categorias = Object.keys(data);

// Agregar filas a la tabla para cada categor√≠a
categorias.forEach(categoria => {
 // Crear una fila para la categor√≠a actual
 let filaHTML = `<tr><td>${etiquetasPersonalizadas[categoria] || categoria}</td>`; // Primera columna: categor√≠a

 // Agregar valores para 2022-2023, 2023-2024, y PromedioCrecimiento
 const rangos = ["2022-2023", "2023-2024", "PromedioCrecimiento"];
 rangos.forEach(rango => {
     let valor = data[categoria][rango] !== undefined ? data[categoria][rango] : "Dato no disponible";
     filaHTML += `<td>${valor}</td>`; // Agregar celdas con los valores
 });

 filaHTML += `</tr>`; // Cerrar la fila
 tbody.innerHTML += filaHTML; // Insertar la fila en la tabla
});
}

//// A PARTIR DE AC√Å VAN LAS RECOMENDACIONES.
function escrito1(pais1, pais2, porcentaje1, porcentaje2) {
    let mensajes = [];

    if (Math.abs(porcentaje1 - porcentaje2) <= 7) {
        mensajes.push(`Tanto ${pais1} como ${pais2} se encuentran en los mismos niveles de producci√≥n de energ√≠a, `);

        let x = (porcentaje1 + porcentaje2) / 2;

        if (x <= 20) {
            mensajes.push("aunque el nivel que poseen es relativamente bajo, por lo que se espera que conjuntamente mejoren sus estrategias.");
        } else if (x < 40) {
            mensajes.push("y se encuentran en una fase de mejora de infraestructura con miras a aumentar su producci√≥n.");
        } else if (x < 80) {
            mensajes.push("y han alcanzado una fase relativamente avanzada. Se les motiva a seguir mejorando sus estrategias.");
        } else {
            mensajes.push(" alcanzando niveles excelentes. Se puede decir que ambos ya est√°n plenamente alineados con el Objetivo de Desarrollo Sostenible (ODS) n√∫mero 7 de la ONU.");
        }
    } else {
        let paisMayor = porcentaje1 > porcentaje2 ? pais1 : pais2;
        let paisMenor = porcentaje1 > porcentaje2 ? pais2 : pais1;
        let porcentajeMayor = Math.max(porcentaje1, porcentaje2);

        mensajes.push(`${paisMayor} est√° en mejores condiciones de producci√≥n de energ√≠a renovable que ${paisMenor}.`);

        if (porcentajeMayor < 20) {
            mensajes.push(`Sin embargo, ${paisMayor} a√∫n no cuenta con la infraestructura de generaci√≥n suficiente para ser energ√©ticamente independiente de los combustibles f√≥siles. Se espera que ambos pa√≠ses mejoren sus estrategias.`);
        } else if (porcentajeMayor < 40) {
            mensajes.push(`Aunque ${paisMayor} a√∫n est√° en proceso de convertirse en un pa√≠s energ√©ticamente limpio, se motiva a ${paisMenor} a indagar sobre sus estrategias, aprender de su proceso y determinar un camino a seguir en conjunto.`);
        } else if (porcentajeMayor < 80) {
            mensajes.push(` Se nota que ${paisMayor} ha avanzado considerablemente en energ√≠a sostenible y que posiblemente puede servir de referencia para ${paisMenor}.`);
        } else {
            mensajes.push(` Dado que ${paisMayor} ha realizado grandes esfuerzos por ser energ√©ticamente sostenible, ser√≠a beneficioso que ${paisMenor} estudie en detalle sus estrategias y las implemente seg√∫n sus condiciones geol√≥gicas, hidrol√≥gicas y meteorol√≥gicas.`);
        }
    }

    // Unir los fragmentos de texto en un solo string
    let mensajeFinal = mensajes.join("");

    // Insertar el mensaje en el HTML
    document.getElementById("mensaje1").textContent = mensajeFinal;

    return mensajeFinal;
}



function escrito2(pais1, pais2, p1, p2) {
    // Obtener los valores ordenados de mayor a menor para cada pa√≠s
    let resultado = calcularPromedioYOrdenar(p1, p2, etiquetasPersonalizadas);

    // Obtener los dos primeros elementos de cada pa√≠s
    let top2P1 = resultado.p1.slice(0, 2).join(" y la "); // Primeros 2 elementos de p1
    let top2P2 = resultado.p2.slice(0, 2).join(" y la "); // Primeros 2 elementos de p


    // Construcci√≥n del mensaje con los datos obtenidos
    let mensaje2 = `Por otro lado, es importante fomentar, independientemente de las condiciones de generaci√≥n actuales, la implementaci√≥n de energ√≠as renovables. Es recomendable potenciar los tipos de energ√≠a que tienen mayor participaci√≥n en la producci√≥n de energ√≠a renovable, ya que esto indica que las condiciones del pa√≠s facilitan su generaci√≥n. 
    Hablando m√°s espec√≠ficamente, en promedio, para ${pais1} se destacan la ${top2P1}, mientras que, para ${pais2}, resaltan la ${top2P2}.`;
    document.getElementById("mensaje2").textContent = mensaje2;

    return mensaje2;
}


function escrito3(pais1, pais2, datosPais1, datosPais2) {
    let cprom1 = parseFloat(datosPais1.TotalRenewables.PromedioCrecimiento.replace('%', ''));
    let cprom2 = parseFloat(datosPais2.TotalRenewables.PromedioCrecimiento.replace('%', ''));

    let mensaje3 = `Por otro lado, mediante el c√°lculo del crecimiento promedio, se puede estimar el compromiso de las naciones con el cambio clim√°tico, analizando el crecimiento total de todas las formas de producci√≥n de energ√≠a. Seg√∫n esto, se puede decir que `;

    if (cprom1 > 10 && cprom2 > 10) {
        mensaje3 += `${pais1} y ${pais2} est√°n haciendo un gran esfuerzo por mejorar su consumo de energ√≠as renovables, ya que su crecimiento promedio es superior al 10% durante el intervalo de tiempo bajo estudio.`;
    } else if (cprom1 > cprom2) {
        mensaje3 += `${pais1} est√° relativamente m√°s comprometido que ${pais2}, ya que su porcentaje de crecimiento es significativamente mayor.`;
        if (cprom2 < 0) {
            mensaje3 += ` Incluso, ${pais2} posee un crecimiento negativo, lo cual podr√≠a ser alarmante para el desarrollo sostenible global. Se recomienda tomar medidas oportunas para revertir esta tendencia.`;
        }
    } else if (cprom2 > cprom1) {
        mensaje3 += `${pais2} est√° relativamente m√°s comprometido que ${pais1}, ya que su porcentaje de crecimiento es significativamente mayor.`;
        if (cprom1 < 0) {
            mensaje3 += ` Incluso, ${pais1} posee un crecimiento negativo, lo cual podr√≠a ser alarmante para el desarrollo sostenible global. Se recomienda tomar medidas oportunas para revertir esta tendencia.`;
        }
    } else if (Math.abs(cprom1 - cprom2) <= 7) {
        mensaje3 += `${pais1} y ${pais2} se encuentran en niveles de desarrollo similares, y seg√∫n lo reportado, se puede deducir que `;
        if (cprom1 > 10 && cprom2 > 10) {
            mensaje3 += `ambos pa√≠ses est√°n muy comprometidos con la transici√≥n energ√©tica.`;
        } else if ((cprom1 < 10 && cprom2 < 10) && (cprom1 > 0 && cprom2 > 0)) {
            mensaje3 += `, si bien ambos pa√≠ses tienen crecimiento positivo, este no representa un avance significativo en la producci√≥n energ√©tica.`;
        } else if (cprom1 < 0 && cprom2 < 0) {
            mensaje3 += `ambos pa√≠ses tienen crecimiento negativo, por lo que actualmente se est√°n alejando de los objetivos principales para la erradicaci√≥n de la generaci√≥n de energ√≠a a partir de fuentes no renovables. Se recomienda modificar su postura energ√©tica para lograr un entorno m√°s amigable con el medio ambiente.`;
        }
    }
    document.getElementById("mensaje3").textContent = mensaje3;
    return mensaje3;
}



function calcularPromedioYOrdenar(p1, p2, etiquetasPersonalizadas) {
    let promediosP1 = calcularPromedio(p1);
    let promediosP2 = calcularPromedio(p2);

    let resultadosP1 = formatearYOrdenar(promediosP1, etiquetasPersonalizadas);
    let resultadosP2 = formatearYOrdenar(promediosP2, etiquetasPersonalizadas);


    // console.log( "hola",{p1: resultadosP1, p2: resultadosP2});

    return { p1: resultadosP1, p2: resultadosP2 };

}

function calcularPromedio(datos) {
    let sumas = {};
    let conteo = 0;

    // Iterar sobre los a√±os
    for (let a√±o in datos) {
        let porcentajes = datos[a√±o].Porcentajes;

        for (let tipo in porcentajes) {
            let valor = parseFloat(porcentajes[tipo].replace('%', ''));
            sumas[tipo] = (sumas[tipo] || 0) + valor;
        }
        conteo++;
    }

    // Calcular el promedio
    let promedios = {};
    for (let tipo in sumas) {
        promedios[tipo] = sumas[tipo] / conteo;
    }

    return promedios;
}

function formatearYOrdenar(promedios, etiquetasPersonalizadas) {
    return Object.entries(promedios)
        .filter(([tipo]) => tipo !== "TotalRenewables") // Eliminar "Total Renewables"
        .map(([tipo, valor]) => {
            let nombre = etiquetasPersonalizadas[tipo] || tipo; // Usa el nombre personalizado si existe
            return `${nombre} (${valor.toFixed(2)}%)`;
        })
        .sort((a, b) => parseFloat(b.match(/([\d.]+)%/)[1]) - parseFloat(a.match(/([\d.]+)%/)[1])); // Orden descendente
}
